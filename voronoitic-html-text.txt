    </script>
	<!--This works but it just needs to be moved below the game canvas
	https://www.w3schools.com/css/css_positioning.asp-->
	<!--https://antongerdelan.net/colour/-->
	<style>
	div.desc{
	position: relative;
	bottom: 0px;
	left: 40px;
	width: 250px;
	height: 600px;
	border: 3px solid #0CA9C9;
	}
	div.aboutVDs{
	position: relative;
	bottom: 600px;
	left: 1300px;
	width: 250px;
	height: 475px;
	border: 3px solid #3B0056;
	}
	div.Fortune{
	position: relative;
	bottom: 360px;
	left: 500px;
	width: 630px;
	height: 1000px;
	border: 3px solid #579B5B;
	}
	</style>
	<br>
	<div id="project-desc" class="desc" >
	<h3>Vornoitic Description</h3>
	<p>Voronoitic is a first-person game in which one can plant Voronoi seeds on an ice rink and then visualize a Voronoi Diagram (VD).</p>
	<p>After construction, the player can look at the Voronoi Diagram from an overhead view or clear the current diagram and make a new one.</p>
	<p>All online demos of VDs that I've seen don't allow users towalk on them so I thought I'd do it.</p>
	<h3>General Controls</h3>
	<p>Move - WASD/ Arrow keys</p>
	<p>Jump - Space Bar</p>
	<p>Place Site/Seed - F when stopped and grounded while constructing</p>
	<p>Visualize VD - E after placing 2 - 300 sites</p>
	<p>Switch Camera - Q only after visualizing a VD </p>
	<p>Clear VD - C after visualizing a VD</p>
	</div>
	
	<div id="about" class="aboutVDs">
	<h3>About Voronoi Diagrams</h3>
	<p>Voronoi Diagrams are plane partitions in which every dot defines a polygon of all other points closest to that dot. </p>
	<p>The lines are equidistant to 2+ dots. The intersection of lines defines points equidistant to 3+ dots.</p>
	<p>The <a href="https://en.wikipedia.org/wiki/Dual_graph" target="_blank"> planar dual</a> of a VD is a <a href="https://en.wikipedia.org/wiki/Delaunay_triangulation" target="_blank"> Delaunay Triangulation</a>.</p>
	<p>Voronoi Diagrams are useful in computer graphics, AI, epidemiology, and figuring out where the nearest airport is.</p>
	<p>Voronoi Diagrams are often constructed with 1000s upon 1000s of points so its important to be able to construct them quickly.</p>
	<p>Scroll down to see pseudocode of Fortune's Algorithm for VDs. </p>
	</div>
	
	<div id="fortunePC" class="Fortune">
	<h3>Fortune's Algorithm O(nlogn):</h3>
	<p>1.Initialize event queue with all site coordinates (site events). Initialize beachline data structure.</p>
	<p>2. while the event queue isn't empty: </p>
	<p style="text-indent: 40px"> a. if site event: handleSiteEvent </p>
	<p style="text-indent: 40px">  b. else valid circle event: handleCircleEvent </p>
	<p style="text-indent: 20px">  c. pop next element from event queue </p>

	<p>3. Remaining internal nodes in beachline are dangling edges. Extend out edges to clip them.</p>
	<p>4. After clipping edges, draw bounding box around VD to box in the diagram.</p>
	<p>5. Optionally, clip the boxed VD to another bounding box to effectively take a screenshot.</p>
	<p>6. Return a <a href="https://en.wikipedia.org/wiki/Doubly_connected_edge_list" target="_blank"> doubly-connected edge</a> list or a list of edges. </p>
	<br>
	<p>Handle Site Event: </p>
	<p>1.</p>
	<p>2.</p>
	<p>3.</p>
	<p>4.</p>

	<br>
	<p>Handle Circle Event: </p>
	<p>1.</p>
	<p>2.</p>
	<p>3.</p>
	<p>4.</p>

	</div>
  </body>
</html>
